// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package __

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockProductInfoClient creates a new instance of MockProductInfoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductInfoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductInfoClient {
	mock := &MockProductInfoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductInfoClient is an autogenerated mock type for the ProductInfoClient type
type MockProductInfoClient struct {
	mock.Mock
}

type MockProductInfoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductInfoClient) EXPECT() *MockProductInfoClient_Expecter {
	return &MockProductInfoClient_Expecter{mock: &_m.Mock}
}

// AddProduct provides a mock function for the type MockProductInfoClient
func (_mock *MockProductInfoClient) AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductID, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 *ProductID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Product, ...grpc.CallOption) (*ProductID, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Product, ...grpc.CallOption) *ProductID); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProductID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Product, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductInfoClient_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type MockProductInfoClient_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *Product
//   - opts ...grpc.CallOption
func (_e *MockProductInfoClient_Expecter) AddProduct(ctx interface{}, in interface{}, opts ...interface{}) *MockProductInfoClient_AddProduct_Call {
	return &MockProductInfoClient_AddProduct_Call{Call: _e.mock.On("AddProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProductInfoClient_AddProduct_Call) Run(run func(ctx context.Context, in *Product, opts ...grpc.CallOption)) *MockProductInfoClient_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Product
		if args[1] != nil {
			arg1 = args[1].(*Product)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProductInfoClient_AddProduct_Call) Return(productID *ProductID, err error) *MockProductInfoClient_AddProduct_Call {
	_c.Call.Return(productID, err)
	return _c
}

func (_c *MockProductInfoClient_AddProduct_Call) RunAndReturn(run func(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductID, error)) *MockProductInfoClient_AddProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function for the type MockProductInfoClient
func (_mock *MockProductInfoClient) GetProduct(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ProductID, ...grpc.CallOption) (*Product, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ProductID, ...grpc.CallOption) *Product); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ProductID, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductInfoClient_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type MockProductInfoClient_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ProductID
//   - opts ...grpc.CallOption
func (_e *MockProductInfoClient_Expecter) GetProduct(ctx interface{}, in interface{}, opts ...interface{}) *MockProductInfoClient_GetProduct_Call {
	return &MockProductInfoClient_GetProduct_Call{Call: _e.mock.On("GetProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProductInfoClient_GetProduct_Call) Run(run func(ctx context.Context, in *ProductID, opts ...grpc.CallOption)) *MockProductInfoClient_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ProductID
		if args[1] != nil {
			arg1 = args[1].(*ProductID)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProductInfoClient_GetProduct_Call) Return(product *Product, err error) *MockProductInfoClient_GetProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductInfoClient_GetProduct_Call) RunAndReturn(run func(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error)) *MockProductInfoClient_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}
