// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cuongpiger/golang/ecommerce (interfaces: ProductInfoClient)
//
// Generated by this command:
//
//	mockgen github.com/cuongpiger/golang/ecommerce ProductInfoClient
//

// Package mock___ is a generated GoMock package.
package mock___

import (
	context "context"
	reflect "reflect"

	ecommerce "github.com/cuongpiger/golang/ecommerce"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProductInfoClient is a mock of ProductInfoClient interface.
type MockProductInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductInfoClientMockRecorder
	isgomock struct{}
}

// MockProductInfoClientMockRecorder is the mock recorder for MockProductInfoClient.
type MockProductInfoClientMockRecorder struct {
	mock *MockProductInfoClient
}

// NewMockProductInfoClient creates a new mock instance.
func NewMockProductInfoClient(ctrl *gomock.Controller) *MockProductInfoClient {
	mock := &MockProductInfoClient{ctrl: ctrl}
	mock.recorder = &MockProductInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInfoClient) EXPECT() *MockProductInfoClientMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductInfoClient) AddProduct(ctx context.Context, in *ecommerce.Product, opts ...grpc.CallOption) (*ecommerce.ProductID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProduct", varargs...)
	ret0, _ := ret[0].(*ecommerce.ProductID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductInfoClientMockRecorder) AddProduct(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductInfoClient)(nil).AddProduct), varargs...)
}

// GetProduct mocks base method.
func (m *MockProductInfoClient) GetProduct(ctx context.Context, in *ecommerce.ProductID, opts ...grpc.CallOption) (*ecommerce.Product, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProduct", varargs...)
	ret0, _ := ret[0].(*ecommerce.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductInfoClientMockRecorder) GetProduct(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductInfoClient)(nil).GetProduct), varargs...)
}
